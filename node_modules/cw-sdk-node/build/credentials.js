"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const yaml = require("js-yaml");
const os = require("os");
const path = require("path");
const logger_1 = require("./util/logger");
/**
 * Credentials precedence:
 * 1. environment variables CW_API_KEY, CW_SECRET_KEY
 * 2. provided via constructor
 * 3. provided via credentials file ~/.cw/credentials.yml OR environment variable CW_CREDENTIALS
 */
const defaultCredsPath = path.join(os.homedir(), ".cw", "credentials.yml");
const defaultStreamURL = "wss://stream.cryptowat.ch";
const defaultTradeURL = "wss://trading.service.cryptowat.ch";
function loadStreamCredentials(opts) {
    if (!opts.creds) {
        opts.creds = {
            apiKey: "",
            secretKey: "",
            url: defaultStreamURL
        };
    }
    if (!opts.creds.url) {
        opts.creds.url = defaultStreamURL;
    }
    loadCredentials(opts.creds, "stream");
    return opts;
}
exports.loadStreamCredentials = loadStreamCredentials;
function loadTradeCredentials(opts) {
    if (!opts.creds) {
        opts.creds = {
            apiKey: "",
            secretKey: "",
            url: defaultTradeURL
        };
    }
    if (!opts.creds.url) {
        opts.creds.url = defaultTradeURL;
    }
    loadCredentials(opts.creds, "trade");
    return opts;
}
exports.loadTradeCredentials = loadTradeCredentials;
function loadCredentials(creds, ctype) {
    if (process.env.CW_API_KEY && process.env.CW_SECRET_KEY) {
        creds.apiKey = process.env.CW_API_KEY;
        creds.secretKey = process.env.CW_SECRET_KEY;
        logger_1.default.debug("loaded credentials from CW_API_KEY and CW_SECRET_KEY");
        return;
    }
    if (creds.apiKey) {
        // apiKey (and secretKey, we assume) has been loaded via constructor
        logger_1.default.debug("loaded credentials from constructor");
        return;
    }
    // If nothing was passed via constructor, attempt to read a credentials file
    let credsPath = defaultCredsPath;
    if (process.env.CW_CREDENTIALS) {
        credsPath = path.resolve(process.env.CW_CREDENTIALS);
    }
    try {
        const credsFile = yaml.safeLoad(fs.readFileSync(credsPath, "utf8"));
        creds.apiKey = credsFile.api_key;
        creds.secretKey = credsFile.secret_key;
        if (ctype === "stream" && credsFile.stream_url) {
            creds.url = credsFile.stream_url;
        }
        else if (ctype === "trade" && credsFile.trade_url) {
            creds.url = credsFile.trade_url;
        }
        logger_1.default.debug("loaded credentials file: %s" + credsPath);
    }
    catch (e) {
        logger_1.default.debug("couldn't find credentials file: %s" + credsPath);
    }
}
