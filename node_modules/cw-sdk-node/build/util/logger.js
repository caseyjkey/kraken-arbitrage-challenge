"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const levels = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3,
    disabled: 4
};
const defaultLevel = "info";
class Logger {
    // Constructor is only used in getInstance
    constructor(level) {
        if (!level) {
            level = defaultLevel;
        }
        this.level = level;
        const loggerFormat = winston.format.printf(info => {
            return `[${info.label}] ${info.message}`;
        });
        this.logger = winston.createLogger({
            format: winston.format.combine(winston.format.label({ label: "cw-sdk-node" }), winston.format.colorize({ all: true }), winston.format.splat(), winston.format.simple(), loggerFormat),
            transports: [
                new winston.transports.Console({
                    level: "debug"
                })
            ]
        });
    }
    setLevel(newLevel) {
        this.level = newLevel || defaultLevel;
    }
    disable() {
        this.level = "disabled";
    }
    error(message, ...meta) {
        if (this.shouldLog("error")) {
            this.logger.error(message, meta);
        }
    }
    warn(message, ...meta) {
        if (this.shouldLog("warn")) {
            this.logger.warn(message, meta);
        }
    }
    info(message, ...meta) {
        if (this.shouldLog("info")) {
            this.logger.info(message, meta);
        }
    }
    debug(message, ...meta) {
        if (this.shouldLog("debug")) {
            this.logger.debug(message, meta);
        }
    }
    shouldLog(level) {
        return levels[this.level] <= levels[level];
    }
}
const logger = new Logger(defaultLevel);
exports.default = logger;
